技术思想：
	在系统初始化阶段，建立一定数量的数据库连接对象(Connection)，并将其存储在连接池中定义的容器中。当有数据库访问请求时，就从连接池中的这个容器中拿出一个连接；当容器中的连接已经用完，并且还没有达到系统定义的最大连接数量时，就从连接池中的这个容器中拿出一个连接；当容器中的容器已经用完，并且还没有达到系统定义的最大连接数时，可以再创建一个连接，当当前使用的连接数达到最大连接数数时，就要等待其他访问请求将连接放回容器后才能使用。当时用完连接的时候，必须将连接放回容器中，这样不同的数据库访问请求就可以共享这些连接，通过重复使用这些已经建立的数据库连接，可以解决频繁建立连接的缺点，从而提高系统性能。
	经过上述描述，我们可以归纳出数据库连接池的主要操作：
		(1)首先建立一个数据库连接池对象
		(2)初始化一定数量的数据库连接，放入连接池对象的容器中
		(3)当有数据库访问请求时，直接从连接池的容器中得到一个连接，这里出现三种情况：
		(a)当容器中的还有连接时，则返回给数据库访问请求者一个连接
	(b)当容器中没有连接时，并且当前建立的连接数没有达到系统定义的最大连接数，则创建一个新的数据库连接。
	(c)当容器中的没有连接并且当前建立的连接数达到系统定义的最大连接数，则当前访问数据库请求就要等待其他访问请求释放连接。
	(4)当数据库访问完成后，应该将连接放回连接池的容器中。
	(5)当服务停止时，需要先释放数据库连接池中的所有数据库连接，然后再释放数据库连接池对象。

	头文件中定义了一个容器List,里面存放了很多个未使用的连接；在对容器内的连接进行操作的时候，需要加锁来保证程序的安全性，所以头文件中定义了一个lock，通过使用lock保证了同一时间只有一个线程对容器进行操作。
	连接池类要统一管理整个应用程序中的连接，所以在整个系统中只需要维护一个连接池对象，试想：如果系统中定义了多个连接池对象，那么每一个对象都可以建立maxSize个连接，这样就失去了创建连接池的初衷，破环了通过连接池统一管理系统中连接的思想。所以这里使用单例模式编写连接池类，单例模式确保一个类只有一个实例，自己进行实例化并且向整个系统提供这个实例。在头文件中，我们定义了一个静态的连接池对象connPool，连接池类提供一个静态的公共方法GetInstance(),外部程序通过调用这个方法来获得连接池对象。并且将连接池类的构造函数定义为私有的，外部的应用程序不能够通过new来实例化连接池类，只能通过GetInstance()方法获得连接池对象；在GetInstance()方法中需要判断连接池类中定义的connPool是否为NULL，若为NULL则调用私有构造函数实例化connPool，若不为空，则直接返回connPool。这样就实现了连接池类的单例模式，从而保证了系统运行过程中只建立一个连接池类的实例对象。
在实例化连接池类的对象时，要对连接池做一些初始化的操作，即建立一定数量的数据库连接。程序中通过InitConnection(intiInitialSize)方法对连接池进行初始化，创建iInitialSize个连接，并且将这些连接放在连接池中的容器connList中，每新建一个连接，curSize就加1。当有数据库访问请求时，需要从连接池中获取一个连接，通过GetConnection()方法实现：首先判断容器中是否还有连接，如果有，则拿出容器中的第一个连接，并且将该连接移出容器；获得的连接要进行判断，如果连接已经关闭，则回收该连接的内存空间，并且重新创建一个连接；然后判断新创建的连接是否为空，如果为空，则说明当前已经建立连接的数量并不是curSize个，而是(curSize-1)个(应该除去这个空连接)。如果容器中已经没有连接了，则要判断当前的curSize值是否已经达到规定的maxSize，如果没有小于maxSize，将建立一个新的连接(++curSize)。如果超过maxSize则等待其他数据库访问请求释放数据库连接。
连接使用完以后，需要将连接放回连接池中，通过ReleaseConnection(sql::Connection* conn)方法实现，它的实现非常简单，就是将传进来的connection连接添加到连接池的容器中。
当需要回收连接池的内存空间时，需要先回收连接池中所有连接的内存空间，然后再释放连接池对象的内存空间。
